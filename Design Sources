module flip_flop_D (
    //input [0:5]sw, //entradas 
    input TA,TB,E,RED,C_1,C_0,clk,
    output reg Q1, Q2,//salidas   
    output V1, A1, R1, V2, A2, R2
);

    logic C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,C15,C16,C17,C18;
    assign C_1 = 1; //constante 1 para las compuertas C9, C11 y C15
    assign C_0 = 0; //constante 0 para compuerta C18
    //salidas
    assign V1 = ~C14;
    assign A1 = ~C13;
    assign R1 = C10;
    assign V2 = ~C18;
    assign A2 = C17;
    assign R2 = ~C12;    
    //compuertas entradas
    assign C1 = ~Q1 & Q2;
    assign C2 = ~Q1 | Q2;
    assign C3 = ~TA & TB & ~Q1;
    assign C4 = ~TB & Q1 & TA;
    assign C5 = ~C1 & C2;
    assign C6 = C3 | C4;
    assign C7 = ~C5 & ~E & ~RED;
    assign C8 = ~Q2 & C6 & ~E & ~RED;
    //compuertas salida
    assign C9 = C_1 & Q2;
    assign C10 = Q1 | RED;
    assign C11 = RED & C_1;
    assign C12 = Q1 & ~C11;
    assign C13 = ~C9 | C10;
    assign C14 = Q2 | C10;
    assign C15 = C_1 & ~C12;
    assign C16 = ~C12 | Q2;
    assign C17 = ~C15 & C16;
    assign C18 = C16 | C_0;
    //flip flop D
    always @(posedge clk)begin
        Q1<=C7;
        Q2<=C8;
        end
endmodule
