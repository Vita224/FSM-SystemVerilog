module FSM (
    input logic clk,
    input logic E,
    input logic TA, TB, RED,
    output logic V1, A1, R1, V2, A2, R2
);

    typedef enum logic [2:0] {S0, S1, S2, S3, S4} statetype;
    statetype state, nextstate;

    always_ff @(posedge clk, posedge E)
        if (E) 
            state <= S0;
        else 
            state <= nextstate;

    always_comb
        case (state)
            S0: if ((TA || TB) && RED) 
                    nextstate = S4;
                else if (RED && state != S4) 
                    nextstate = S4;
                else if (TA) 
                    nextstate = S0;
                else 
                    nextstate = S1;
            S1: nextstate = S2;
            S2: if ((TA || TB) && RED) 
                    nextstate = S4;
                else if (RED && state != S4) 
                    nextstate = S4;
                else if (TB) 
                    nextstate = S2;
                else 
                    nextstate = S3;
            S3: nextstate = S0;
            S4: if (!RED) 
                    nextstate = S0;
                else 
                    nextstate = S4;
        endcase
    
    always_comb
        case (state)
            S0: begin V1 = 1; A1 = 0; R1 = 0; V2 = 0; A2 = 0; R2 = 1; end
            S1: begin V1 = 0; A1 = 1; R1 = 0; V2 = 0; A2 = 0; R2 = 1; end
            S2: begin V1 = 0; A1 = 0; R1 = 1; V2 = 1; A2 = 0; R2 = 0; end
            S3: begin V1 = 0; A1 = 0; R1 = 1; V2 = 0; A2 = 1; R2 = 0; end
            S4: begin V1 = 0; A1 = 0; R1 = 1; V2 = 0; A2 = 0; R2 = 1; end
        endcase

endmodule
